package school.hei.asa.endpoint.rest.model.th;

import static java.util.stream.Collectors.groupingBy;

import java.time.LocalDate;
import java.time.YearMonth;
import java.time.temporal.WeekFields;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.experimental.Accessors;

@EqualsAndHashCode
public class ThMonth {

  @Accessors(fluent = true)
  @Getter
  private final YearMonth yearMonth;

  private final Map<Integer, List<Integer>> daysByWeek;
  public static final int FILLER_DAY = -1;

  public ThMonth(YearMonth yearMonth) {
    this.yearMonth = yearMonth;
    this.daysByWeek = daysByWeek(yearMonth);
  }

  public List<Integer> weeks() {
    return daysByWeek.keySet().stream().sorted().toList();
  }

  public List<Integer> daysByWeek(Integer week) {
    return daysByWeek.get(week);
  }

  public boolean isFillerDay(Integer day) {
    return day == FILLER_DAY;
  }

  public boolean isNow(Integer day) {
    var now = LocalDate.now();
    return now.getYear() == yearMonth.getYear()
        && now.getMonth() == yearMonth.getMonth()
        && now.getDayOfMonth() == day;
  }

  private static Map<Integer, List<Integer>> daysByWeek(YearMonth yearMonth) {
    var res = new LinkedHashMap<Integer, List<Integer>>();
    dayWithWeeksByWeek(yearMonth)
        .forEach(
            (week, daysWithWeek) ->
                res.put(week, daysWithWeek.stream().map(dayWithWeek -> dayWithWeek.day).toList()));
    return res;
  }

  /*
   * Mostly generated by ChatGPT
   */
  private static Map<Integer, List<DayWithWeek>> dayWithWeeksByWeek(YearMonth yearMonth) {
    List<DayWithWeek> days = new ArrayList<>();
    var firstDayOfMonth = yearMonth.atDay(1);
    var weekOfYear = WeekFields.of(Locale.FRANCE).weekOfYear();
    var firstWeekNumber = firstDayOfMonth.get(weekOfYear);
    for (int i = 1; i < firstDayOfMonth.getDayOfWeek().getValue(); i++) {
      days.add(new DayWithWeek(FILLER_DAY, firstWeekNumber));
    }

    for (int day = 1; day <= yearMonth.lengthOfMonth(); day++) {
      var currentDay = yearMonth.atDay(day);
      var weekNumber = currentDay.get(weekOfYear);
      days.add(new DayWithWeek(day, weekNumber));
    }

    return days.stream().collect(groupingBy(DayWithWeek::week));
  }

  private record DayWithWeek(int day, int week) {}
}
